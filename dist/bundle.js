!function(t){var n={};function e(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(i,o,function(n){return t[n]}.bind(null,o));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var i=function(){function t(t,n,e){this.context=t,this.camera=n,this.canvas=e}return t.prototype.draw=function(t){this.context.beginPath(),t.draw(this),this.context.stroke()},t.prototype.arc=function(t,n,e,i,o){return this.context.arc(t,n,e,i,o),this},t.prototype.fill=function(t){return this.context.fillStyle=t,this.context.fill(),this},t}(),o=function(){function t(t,n,e){this.canvas=document.createElement("canvas"),this.canvas.width=t,this.canvas.height=n,this.context=new i(this.canvas.getContext("2d"),e,this),this.entities=[]}return t.prototype.append=function(t){t.appendChild(this.canvas)},t.prototype.update=function(t){var n=this;this.entities.forEach((function(e){e.update(t),e.draw(t,n.context)}))},t}(),r=function(){function t(t,n,e,i){this.x=t,this.y=n,this.radius=e,this.color=i}return t.prototype.draw=function(t){t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.fill(this.color)},t}(),c=function(){function t(t,n,e,i,o,c){this.id=t,this.x=n,this.y=e,this.radius=i,this.color=o,this.velocity=c,this.entities=[],this.model=new r(this.x,this.y,this.radius,this.color)}return t.prototype.getEntities=function(){return this.entities},t.prototype.update=function(t){this.entities.forEach((function(n){return n.update(t)}))},t.prototype.draw=function(t,n){n.draw(this.model)},t}(),s=function(){function t(){this.entities=[]}return t.prototype.update=function(t){this.entities.forEach((function(n){return n.update(t)}))},t.prototype.draw=function(t,n){n.context.clearRect(0,0,n.canvas.canvas.width,n.canvas.canvas.height),n.canvas.canvas.style.backgroundColor="#000000",this.entities.forEach((function(e){return e.draw(t,n)}))},t.prototype.getEntities=function(){return this.entities},t}(),u=function(){this.x=0,this.y=0,this.z=0},a=function(t,n,e){e.update(n),window.requestAnimationFrame((function(n){return a(n,n-t,e)}))};document.onreadystatechange=function(t){if("complete"==document.readyState){var n=new o(document.body.clientWidth,document.body.clientHeight,new u),e=new s;e.entities.push(new c("1",400,400,120,"#ffffff",[0,0])),e.entities.push(new c("2",300,150,80,"#784573",[0,0])),n.entities.push(e),n.append(document.body),a(0,0,n)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,