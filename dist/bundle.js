!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);class i{constructor(t,e,s){this.context=t,this.camera=e,this.canvas=s}draw(t){this.context.beginPath(),t.draw(this),this.context.stroke()}arc(t,e,s,i,r){return this.context.arc(this.camera.X(t),this.camera.Y(e),this.camera.zTransform(s),i,r),this}write(t,e){const s=t.getFontSize(),i=t.getFontFamily(),r=t.getCoordinates();this.context.beginPath(),this.context.font=`${fontSize}px ${i}`,e.map((t,e)=>{this.context.fillText(t,r.x,r.y+s*e)})}fill(t){return this.context.fillStyle=t,this.context.fill(),this}}class r{constructor(t,e,s){this.canvas=document.createElement("canvas"),this.canvas.width=t,this.canvas.height=e,this.context=new i(this.canvas.getContext("2d"),s,this),this.entities=[]}appendTo(t){t.appendChild(this.canvas)}update(t){this.entities.forEach(e=>{e.update(t),e.draw(t,this.context)})}}class o{constructor(t,e,s){this.coords=t,this.radius=e,this.color=s}draw(t){t.arc(this.coords.x,this.coords.y,this.radius,0,2*Math.PI),t.fill(this.color)}getCoordinates(){return this.coords}setCoordinates(t){this.coords=t}}const a=6.674*Math.pow(10,-11);var n;!function(t){t[t.PLAY=0]="PLAY",t[t.PAUSE=1]="PAUSE"}(n||(n={}));n.PLAY;var c=7884e3,h=18e7,d=a,l=1,u=2.5,y=.1,m=25,x=1e4,f=1e4,p=.1,v=29780;const b=(t,e)=>{const s=((t,e)=>(Math.abs(e.x-t.x)+Math.abs(e.y-t.y))*h)(t.coords,e.coords);if(0==s||Number.isNaN(s))return;return d*(t.mass*e.mass/(s*s))*l},w=(t,e,s,i)=>-(t-e)/(Math.abs(s.x-i.x)+Math.abs(s.y-i.y));var g=(t,e,s,i)=>{const r=b(e,s)/e.mass/h;t.accelerate(r*w(e.coords.x,s.coords.x,e.coords,s.coords),r*w(e.coords.y,s.coords.y,e.coords,s.coords),i)};class z{constructor(t,e,s,i,r,a,n){this.id=t,this.coords=e,this.radius=s,this.mass=i,this.color=r,this.velocity=a,this.planets=n,this.entities=[],this.model=new o(this.coords,this.radius,this.color)}getEntities(){return this.entities}update(t){for(let e in this.planets){const s=this.planets[e];s.id!=this.id&&g(this.velocity,this,s,t)}this.velocity.apply(this.coords,t),this.entities.forEach(e=>e.update(t))}draw(t,e){e.draw(this.model)}getCoordinates(){return this.coords}setCoordinates(t){this.coords=t}}class P{constructor(){this.entities=[]}update(t){this.entities.forEach(e=>e.update(t))}draw(t,e){e.context.clearRect(0,0,e.canvas.canvas.width,e.canvas.canvas.height),e.canvas.canvas.style.backgroundColor="#000000",this.entities.forEach(s=>s.draw(t,e)),e.context.stroke()}getEntities(){return this.entities}}class S{constructor(t,e,s){this.x=0,this.y=0,this.z=1,this.x=t,this.y=e,this.z=s}X(t){return this.zTransform(t-this.x)}Y(t){return this.zTransform(t-this.y)}zTransform(t){return t*(1/this.z)}relativeX(t){return this.x+t}relativeY(t){return this.y+t}}class C{constructor(t,e){this.camera=t,this.canvas=e,this.actionByKeycode={82:()=>{this.camera.x=0,this.camera.y=0,this.camera.z=1},90:()=>{this.camera.z<=p||(this.camera.z-=y)},88:()=>{this.camera.z+=y},37:()=>{this.camera.x-m<=0||(this.camera.x-=m)},38:()=>{this.camera.y-m<=0||(this.camera.y-=m)},39:()=>{this.camera.x>=x||(this.camera.x+=m)},40:()=>{this.camera.y>=f||(this.camera.y+=m)}}}handleKeyboard(t){null!=this.actionByKeycode&&this.actionByKeycode[t.keyCode]&&this.actionByKeycode[t.keyCode]()}}class E{constructor(t,e){this.x=t,this.y=e}accelerate(t,e,s){this.x+=t*s,this.y+=e*s}apply(t,e){t.x+=this.x*e,t.y+=this.y*e}}class M{constructor(t,e){this.x=t,this.y=e}setCoordinates(t,e){this.x=t,this.y=e}}const T=(t,e,s)=>{s.update(e/1e3*c),window.requestAnimationFrame(e=>T(e,e-t,s))};document.onreadystatechange=function(){if("complete"!=document.readyState)return;const t=new S(x/2,f/2,u),e=new r(document.body.clientWidth,document.body.clientHeight,t);e.appendTo(document.body);const s=new P,i=new C(t,e),o=((t,e)=>{const s={x:e.relativeX(e.z*(t.canvas.width/2)),y:e.relativeY(e.z*(t.canvas.height/2)),radius:120,mass:1.9891e30,color:"orange",velocity:[0,0]};return{sun41:s,"earth alors":{x:s.x-14996e7/h,y:s.y,radius:30,mass:5972e21,color:"skyblue",velocity:[v/h*1/3,v/h*2/3]},interloper:{x:s.x+10096e7/h,y:s.y+20,radius:24,mass:3972e21,color:"red",velocity:[v/h*1/3,v/h*2/3]}}})(e,t);let a=[];document.querySelector("body").addEventListener("keydown",i.handleKeyboard.bind(i));for(let t in o){const e=o[t];a.push(new z(t,new M(e.x,e.y),e.radius,e.mass,e.color,new E(e.velocity[0],e.velocity[1]),a))}s.entities=a,e.entities.push(s),T(0,0,e)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,