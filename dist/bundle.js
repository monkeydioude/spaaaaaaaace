!function(t){var n={};function e(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(i,o,function(n){return t[n]}.bind(null,o));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var i,o=function(){function t(t,n,e){this.context=t,this.camera=n,this.canvas=e}return t.prototype.draw=function(t){this.context.beginPath(),t.draw(this),this.context.stroke()},t.prototype.arc=function(t,n,e,i,o){return this.context.arc(this.camera.X(t),this.camera.Y(n),this.camera.zTransform(e),i,o),this},t.prototype.fill=function(t){return this.context.fillStyle=t,this.context.fill(),this},t}(),r=function(){function t(t,n,e){this.canvas=document.createElement("canvas"),this.canvas.width=t,this.canvas.height=n,this.context=new o(this.canvas.getContext("2d"),e,this),this.entities=[]}return t.prototype.appendTo=function(t){t.appendChild(this.canvas)},t.prototype.update=function(t){var n=this;this.entities.forEach((function(e){e.update(t),e.draw(t,n.context)}))},t}(),a=function(){function t(t,n,e,i){this.x=t,this.y=n,this.radius=e,this.color=i}return t.prototype.draw=function(t){t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.fill(this.color)},t}(),c=function(){function t(t,n,e,i,o,r){this.id=t,this.x=n,this.y=e,this.radius=i,this.color=o,this.velocity=r,this.entities=[],this.model=new a(this.x,this.y,this.radius,this.color)}return t.prototype.getEntities=function(){return this.entities},t.prototype.update=function(t){this.entities.forEach((function(n){return n.update(t)}))},t.prototype.draw=function(t,n){n.draw(this.model)},t}(),s=function(){function t(){this.entities=[]}return t.prototype.update=function(t){this.entities.forEach((function(n){return n.update(t)}))},t.prototype.draw=function(t,n){n.context.clearRect(0,0,n.canvas.canvas.width,n.canvas.canvas.height),n.canvas.canvas.style.backgroundColor="#000000",this.entities.forEach((function(e){return e.draw(t,n)}))},t.prototype.getEntities=function(){return this.entities},t}(),u=function(){function t(t,n,e){this.x=0,this.y=0,this.z=1,this.x=t,this.y=n,this.z=e}return t.prototype.X=function(t){return this.zTransform(t-this.x)},t.prototype.Y=function(t){return this.zTransform(t-this.y)},t.prototype.zTransform=function(t){return t*(1/this.z)},t}();Math.pow(10,-11);!function(t){t[t.PLAY=0]="PLAY",t[t.PAUSE=1]="PAUSE"}(i||(i={}));i.PLAY;var h=1.2,f=.1,d=25,y=1e4,p=1e4,l=.1,m=function(){function t(t,n){var e=this;this.camera=t,this.canvas=n,this.actionByKeycode={82:function(){e.camera.x=0,e.camera.y=0,e.camera.z=1},90:function(){e.camera.z<=l||(e.camera.z-=f)},88:function(){e.camera.z+=f},37:function(){e.camera.x-d<=0||(e.camera.x-=d)},38:function(){e.camera.y-d<=0||(e.camera.y-=d)},39:function(){e.camera.x>=y||(e.camera.x+=d)},40:function(){e.camera.y>=p||(e.camera.y+=d)}}}return t.prototype.handleKeyboard=function(t){null!=this.actionByKeycode&&this.actionByKeycode[t.keyCode]&&this.actionByKeycode[t.keyCode]()},t}(),v=function(t,n,e){e.update(n),window.requestAnimationFrame((function(n){return v(n,n-t,e)}))};document.onreadystatechange=function(t){if("complete"==document.readyState){var n=new u(y/2,p/2,h),e=new r(document.body.clientWidth,document.body.clientHeight,n);e.appendTo(document.body);var i=new s,o=new m(n,e),a=function(t,n){return{1:{x:n.X(t.canvas.width/2+120),y:n.Y(t.canvas.width/2+120),radius:120,color:"#ffffff",velocity:[0,0]},2:{x:n.X(t.canvas.width/3+80),y:n.Y(t.canvas.height/4+80),radius:80,color:"#784573",velocity:[0,0]}}}(e,n);for(var f in document.querySelector("body").addEventListener("keydown",o.handleKeyboard.bind(o)),a){var d=a[f];i.entities.push(new c(f,d.x,d.y,d.radius,d.color,d.velocity))}e.entities.push(i),v(0,0,e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,